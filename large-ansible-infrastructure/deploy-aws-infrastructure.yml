- hosts: localhost
  gather_facts: no
  vars:
    AWS_ACCESS_KEY_ID: "{{ lookup('env','var_aws_access_key') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env','var_aws_secret_key') }}"
    AWS_REGION: "{{ lookup('env','var_region') }}"
    dev_environment: "{{ lookup('env','var_dev_environment') }}"
    var_name: "{{ lookup('env','var_name') }}"
    db_username: "{{ lookup('env','var_db_username') }}"
    db_password: "{{ lookup('env','var_db_password') }}"
    i_type_server: "{{ lookup('env','var_octopus_server_instance_size') }}"
    i_type_all: "{{ lookup('env','var_octopus_chat_instance_size') }}"
    i_type_webserver: "{{ lookup('env','var_octopus_webserver_instance_size') }}"
    i_type_transcoder: "{{ lookup('env','var_octopus_transcoder_instance_size') }}"
    db_type_server: "{{ lookup('env','var_octopus_server_rds_size') }}"
    db_type_chat: "{{ lookup('env','var_octopus_chat_rds_size') }}"
    db_type_log: "{{ lookup('env','var_octopus_log_rds_size') }}"
  tasks:
    # VPC #
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ var_name }}-{{ dev_environment }}-vpc"
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        cidr_block: "200.1.0.0/16"
        dns_hostnames: yes
        dns_support: yes
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-vpc"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: vpc_name

    - name: Debug VPC
      debug:
        var: vpc_name

    # AMI Image Facts #
    - name: Obtain all AZ present in region {{ AWS_REGION }}
      aws_az_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
      register: az_in_region

    - name: Display all AZ present in region {{ AWS_REGION }}
      debug:
        var: az_in_region

    # Subnet 1 #
    - name: Create Subnet 1
      ec2_vpc_subnet:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        vpc_id: "{{ vpc_name.vpc.id }}"
        cidr: "200.1.1.0/24"
        az: "{{ az_in_region.availability_zones[0].zone_name }}"
        map_public: yes
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-public-subnet-1"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: public_subnet_1

    - name: Debug Subnet 1
      debug:
        var: public_subnet_1

    # Subnet 2 #
    - name: Create Subnet 2
      ec2_vpc_subnet:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        vpc_id: "{{ vpc_name.vpc.id }}"
        cidr: "200.1.2.0/24"
        az: "{{ az_in_region.availability_zones[1].zone_name }}"
        map_public: yes
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-public-subnet-2"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: public_subnet_2

    - name: Debug Subnet 2
      debug:
        var: public_subnet_2

    # Internet Gateway #
    - name: Create Internet Gateway
      ec2_vpc_igw:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        vpc_id: "{{ vpc_name.vpc.id }}"
        state: present
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-igw"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: igw

    # Routing Table #
    - name: Create Routing Table
      ec2_vpc_route_table:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        vpc_id: "{{ vpc_name.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ public_subnet_1.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-rt"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: rt

    # Define EC2 SSH Security Group #
    - name: Create required SSH SG
      ec2_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-ssh-sg"
        vpc_id: "{{ vpc_name.vpc.id }}"
        description: "SSH ports for EC2 single server"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - 217.24.19.64/29
              - 82.117.216.88/30
              - 15.188.31.234/32
          - proto: tcp
            from_port: 15672
            to_port: 15672
            cidr_ip:
              - 217.24.19.64/29
              - 82.117.216.88/30
          - proto: tcp
            from_port: 10050
            to_port: 10050
            cidr_ip:
              - 217.24.19.64/29
              - 82.117.216.88/30
              - 34.254.36.247/32
              - 50.16.146.15/32
          - proto: tcp
            from_port: 0
            to_port: 0
            cidr_ip:
              - "200.1.0.0/16"
        rules_egress:
          - proto: "-1"
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
        tags:
          Name: "{{ var_name }}-ssh-sg"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    # Define EC2 Web Security Group #
    - name: Create required EC2 Web SG
      ec2_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-web-sg"
        vpc_id: "{{ vpc_name.vpc.id }}"
        description: "Web ports for EC2 single server"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"
        rules_egress:
          - proto: "-1"
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
        tags:
          Name: "{{ var_name }}-web-sg"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    # Define RDS Postgresql Security Group #
    - name: Create required RDS Postgres SG
      ec2_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-db-sg"
        vpc_id: "{{ vpc_name.vpc.id }}"
        description: "DB ports for EC2 single server"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip:
              - 200.1.0.0/16
              - 217.24.19.64/29
              - 82.117.216.88/30
              - 15.188.31.234/32
          - proto: tcp
            from_port: 10050
            to_port: 10050
            cidr_ip:
              - 217.24.19.64/29
              - 82.117.216.88/30
              - 34.254.36.247/32
              - 50.16.146.15/32
        rules_egress:
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: "0.0.0.0/0"
        tags:
          Name: "{{ var_name }}-db-sg"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: db_sg

    - name: Debug a DB SG
      debug:
        var: db_sg

    # Create RDS Postgresql subnet group #
    - name: Create RDS subnet group
      rds_subnet_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        state: present
        name: "{{ var_name }}-subnet-db-public"
        description: "RDS Subnet"
        subnets:
          - "{{ public_subnet_1.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
      register: rds_subnet_group

    - name: Debug the RDS Subnet Group
      debug:
        var: rds_subnet_group

    #######################################################################
    # Create RDS instance for octopus-server, octopus-comments and ums #
    #######################################################################

    - name: Create RDS octopus-server, octopus-comments and ums instance
      rds:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        command: create
        db_engine: postgres
        engine_version: "9.6.11"
        db_name: octopus_server_db
        instance_name: "{{ var_name }}-{{ dev_environment }}-server-comments-ums-db"
        instance_type: "{{ db_type_server }}"
        multi_zone: "true"
        username: "{{ db_username }}"
        password: "{{ db_password }}"
        backup_window: "04:00-04:30"
        maint_window: "sun:04:30-sun:05:30"
        backup_retention: "30"
        publicly_accessible: "true"
        port: 5432
        size: "20"
        vpc_security_groups: "{{ db_sg.group_id }}"
        subnet: "{{ var_name }}-subnet-db-public"
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-server-comments-ums-db"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    #######################################################
    # Create RDS instance for chat-analytics-ecommerce db #
    #######################################################

    - name: Create RDS chat-comments instance
      rds:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        command: create
        db_engine: postgres
        engine_version: "9.6.11"
        db_name: octopus_chat_db
        instance_name: "{{ var_name }}-{{ dev_environment }}-chat-analytics-ecommerce-db"
        instance_type: "{{ db_type_chat }}"
        multi_zone: "true"
        username: "{{ db_username }}"
        password: "{{ db_password }}"
        backup_window: "04:00-04:30"
        maint_window: "sun:04:30-sun:05:30"
        backup_retention: "30"
        publicly_accessible: "true"
        port: 5432
        size: "20"
        vpc_security_groups: "{{ db_sg.group_id }}"
        subnet: "{{ var_name }}-subnet-db-public"
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-chat-analytics-ecommerce-db"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    ##################################
    # Create RDS instance for log db #
    ##################################

    - name: Create RDS log-db instance
      rds:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        command: create
        db_engine: postgres
        engine_version: "9.6.11"
        db_name: "octopus_log_db"
        instance_name: "{{ var_name }}-{{ dev_environment }}-log-db"
        instance_type: "{{ db_type_log }}"
        multi_zone: "true"
        username: "{{ db_username }}"
        password: "{{ db_password }}"
        backup_window: "04:00-04:30"
        maint_window: "sun:04:30-sun:05:30"
        backup_retention: "30"
        publicly_accessible: "true"
        port: 5432
        size: "20"
        vpc_security_groups: "{{ db_sg.group_id }}"
        subnet: "{{ var_name }}-subnet-db-public"
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-log-db"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    # Gather RDS Facts #
    - name: Gather {{ var_name }}-{{ dev_environment }}-server-comments-ums-db RDS instance Facts
      rds_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        db_instance_identifier: "{{ var_name }}-{{ dev_environment }}-server-comments-ums-db"
      register: rds_facts

    - name: set facts for server-comments-ums-db RDS instance
      set_fact:
        endpoint_server_db: "{{ rds_facts.instances[0].endpoint.address }}"

    # Get AWS ami image id #
    - name: Get the AMI image id
      ec2_ami_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          name: "amzn2-ami-hvm-*-x86_64-gp2"
      register: ami_find

    - name: Sort the latest AMI
      set_fact:
        latest_ami: "{{ ami_find.images | sort(attribute='creation_date') | last }}"

    - name: Debug the AMI image
      debug:
        var: latest_ami

    # Create AWS keypair #
    - name: Create aws private keypair
      ec2_key:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: devops
        key_material: "ssh-rsa SomeXXXKey"

    ###############################
    # Create EC2 octopus instance #
    ###############################

    - name: Create octopus-all instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        key_name: devops
        instance_type: "{{ i_type_all }}"
        image: "{{ latest_ami.image_id }}"
        group:
          - "{{ var_name }}-ssh-sg"
        wait: yes
        wait_timeout: 420
        assign_public_ip: no
        vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: yes
            volume_type: gp2
            volume_size: 20
        instance_tags:
          Name: "{{ var_name }}-{{ dev_environment }}-all"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        exact_count: 1
        count_tag:
          Name: "{{ var_name }}-{{ dev_environment }}-all"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: octopus_var

    - name: Debug {{ var_name }}-{{ dev_environment }}-all result
      debug:
        var: octopus_var

    # Gather EC2 All Instance Facts #
    - name: Gather EC2 Facts
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          "tag:Name": "{{ var_name }}-{{ dev_environment }}-all"
      register: ec2_octopus_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_octopus_facts

    - name: Wait for EC2 Instance to boot
      command: "sleep 80"

    # Assign EIP to EC2 {{ var_name }}-{{ dev_environment }}-all instance #
    - name: Assign EIP to {{ var_name }}-{{ dev_environment }}-all instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        device_id: "{{ ec2_octopus_facts.instances[0].instance_id }}"
        release_on_disassociation: yes
        state: present
      tags:
        - elastic_ip_octopus

    # Gather EIP Facts to run octopus_setup_all.yml #
    - name: Gather EIP Facts to run octopus_setup_all.yml
      ec2_eip_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          instance-id: "{{ ec2_octopus_facts.instances[0].instance_id }}"
      tags:
        - elastic_ip_octopus
      register: eip_facts_octopus

    - name: Debug EIP Facts
      debug:
        var: eip_facts_octopus

    - name: Set the ip_addr_all Fact
      set_fact:
        ip_addr_all: "{{ eip_facts_octopus.addresses[0].public_ip }}"

    - name: Debug ip address of the server
      debug:
        var: ip_addr_all

    # Install Octopus Services #
    - name: Install octopus services on EC2 octopus-all instance
      command: "ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -u ec2-user -i {{ ip_addr_all }}, --private-key ~/.ssh/devops.pem octopus_setup_all.yml"
      register: octopus_setup

    - name: Debug {{ var_name }}-{{ dev_environment }}-all instance setup
      debug:
        var: octopus_setup

    ##################################
    # Create EC2 transcoder instance #
    ##################################

    - name: Create transcoder instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        key_name: devops
        instance_type: "{{ i_type_transcoder }}"
        image: "{{ latest_ami.image_id }}"
        group:
          - "{{ var_name }}-ssh-sg"
        wait: yes
        wait_timeout: 420
        assign_public_ip: no
        vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: yes
            volume_type: gp2
            volume_size: 20
        instance_tags:
          Name: "{{ var_name }}-{{ dev_environment }}-transcoder"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        exact_count: 1
        count_tag:
          Name: "{{ var_name }}-{{ dev_environment }}-transcoder"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: transcoder_var

    - name: Debug {{ var_name }}-{{ dev_environment }}-transcoder result
      debug:
        var: transcoder_var

    # Gather EC2 Transcoder Instance Facts #
    - name: Gather EC2 Transcoder Facts
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          "tag:Name": "{{ var_name }}-{{ dev_environment }}-transcoder"
      register: ec2_transcoder_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_transcoder_facts

    - name: Wait for EC2 Instance to boot
      command: "sleep 80"

    # Assign EIP to EC2 {{ var_name }}-{{ dev_environment }}-all instance #
    - name: Assign EIP to {{ var_name }}-{{ dev_environment }}-transcoder instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        device_id: "{{ ec2_transcoder_facts.instances[0].instance_id }}"
        release_on_disassociation: yes
      tags:
        - elastic_ip_transcoder

    # Gather EIP Facts to run octopus_setup_transcoder.yml #
    - name: Gather EIP Facts to run octopus_setup_transcoder.yml
      ec2_eip_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          instance-id: "{{ ec2_transcoder_facts.instances[0].instance_id }}"
      tags:
        - elastic_ip_transcoder
      register: eip_facts_transcoder

    - name: Debug EIP Facts
      debug:
        var: eip_facts_transcoder

    - name: Set the ip_addr_transcoder Fact
      set_fact:
        ip_addr_transcoder: "{{ eip_facts_transcoder.addresses[0].public_ip }}"

    - name: Debug ip address of the server
      debug:
        var: ip_addr_transcoder

    # Install transcoder service #
    - name: Install transcoder service on EC2 transcoder instance
      command: "ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -u ec2-user -i {{ ip_addr_transcoder }}, --private-key ~/.ssh/devops.pem octopus_setup_transcoder.yml"
      register: transcoder_setup

    - name: Debug transcoder instance setup
      debug:
        var: transcoder_setup

    #################################
    # Create EC2 Webserver instance #
    #################################

    - name: Create webserver instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        key_name: devops
        instance_type: "{{ i_type_webserver }}"
        image: "{{ latest_ami.image_id }}"
        group:
          - "{{ var_name }}-ssh-sg"
          - "{{ var_name }}-web-sg"
        wait: yes
        wait_timeout: 420
        assign_public_ip: no
        vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: yes
            volume_type: gp2
            volume_size: 20
        instance_tags:
          Name: "{{ var_name }}-{{ dev_environment }}-webserver"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        exact_count: 1
        count_tag:
          Name: "{{ var_name }}-{{ dev_environment }}-webserver"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: webserver_var

    - name: Debug {{ var_name }}-{{ dev_environment }}-webserver result
      debug:
        var: webserver_var

    # Gather EC2 Webserver Instance Facts #
    - name: Gather EC2 Facts
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          "tag:Name": "{{ var_name }}-{{ dev_environment }}-webserver"
      register: ec2_webserver_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_webserver_facts

    - name: Wait for EC2 Instance to boot
      command: "sleep 80"

    # Assign EIP to EC2 {{ var_name }}-{{ dev_environment }}-webserver instance #
    - name: Assign EIP to {{ var_name }}-{{ dev_environment }}-webserver instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        device_id: "{{ ec2_webserver_facts.instances[0].instance_id }}"
        release_on_disassociation: yes
      tags:
        - elastic_ip_webserver

    # Gather EIP Facts to run octopus_setup_webserver.yml #
    - name: Gather EIP Facts to run octopus_setup_webserver.yml
      ec2_eip_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          instance-id: "{{ ec2_webserver_facts.instances[0].instance_id }}"
      tags:
        - elastic_ip_webserver
      register: eip_facts_webserver

    - name: Debug EIP Facts
      debug:
        var: eip_facts_webserver

    - name: Set the ip_addr_webserver Fact
      set_fact:
        ip_addr_webserver: "{{ eip_facts_webserver.addresses[0].public_ip }}"

    - name: Debug ip address of the server
      debug:
        var: ip_addr_webserver

    # Install Webserver Services #
    - name: Install webserver service on EC2 Webserver instance
      command: "ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -u ec2-user -i {{ ip_addr_webserver }}, --private-key ~/.ssh/devops.pem octopus_setup_webserver.yml"
      register: webserver_setup

    - name: Debug {{ var_name }}-{{ dev_environment }}-webserver instance setup
      debug:
        var: webserver_setup

    ################################
    # Create EC2 os_first instance #
    ################################

    - name: Change os_first instance state by tag
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        key_name: devops
        instance_type: "{{ i_type_server }}"
        image: "{{ latest_ami.image_id }}"
        group:
          - "{{ var_name }}-ssh-sg"
        wait: yes
        wait_timeout: 420
        assign_public_ip: no
        vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: yes
            volume_type: gp2
            volume_size: 20
        instance_tags:
          Name: "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-1"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        exact_count: 1
        count_tag:
          Name: "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-1"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: octopus_first_var

    - name: Debug {{ var_name }}-{{ dev_environment }}-octopus-server-ums-1 result
      debug:
        var: octopus_first_var

    # Gather EC2 octopus-server-ums-1 Instance Facts #
    - name: Gather EC2 Facts
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          "tag:Name": "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-1"
      register: ec2_os_first_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_os_first_facts

    - name: Wait for EC2 Instance to boot
      command: "sleep 80"

    # Assign EIP to EC2 {{ var_name }}-{{ dev_environment }}-all instance #
    - name: Assign EIP to {{ var_name }}-{{ dev_environment }}-octopus-server-ums-1 instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        device_id: "{{ ec2_os_first_facts.instances[0].instance_id }}"
        release_on_disassociation: yes
      tags:
        - elastic_ip_octopus

    # Gather EIP Facts to run octopus_setup_server_ums.yml #
    - name: Gather EIP Facts to run octopus_setup_server_ums.yml
      ec2_eip_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          instance-id: "{{ ec2_os_first_facts.instances[0].instance_id }}"
      tags:
        - elastic_ip_octopus
      register: eip_facts_os_first

    - name: Debug EIP Facts
      debug:
        var: eip_facts_os_first

    - name: Set the ip_addr_os_first Fact
      set_fact:
        ip_addr_os_first: "{{ eip_facts_os_first.addresses[0].public_ip }}"

    - name: Debug ip address of the server
      debug:
        var: ip_addr_os_first

    # Install octopus-server and ums-server Services #
    - name: Install octopus-server and ums-server services on EC2 octopus instance
      command: "ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -u ec2-user -i {{ ip_addr_os_first }}, --private-key ~/.ssh/devops.pem octopus_setup_server_ums.yml"
      register: os_first_setup

    - name: Debug {{ var_name }}-{{ dev_environment }}-octopus-server-ums-1 instance setup
      debug:
        var: os_first_setup

    #################################
    # Create EC2 os_second instance #
    #################################

    - name: Change os_second instance state by tag
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        key_name: devops
        instance_type: "{{ i_type_server }}"
        image: "{{ latest_ami.image_id }}"
        group:
          - "{{ var_name }}-ssh-sg"
        wait: yes
        wait_timeout: 420
        assign_public_ip: no
        vpc_subnet_id: "{{ public_subnet_1.subnet.id }}"
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: yes
            volume_type: gp2
            volume_size: 20
        instance_tags:
          Name: "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-2"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        exact_count: 1
        count_tag:
          Name: "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-2"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
      register: os_second_var

    - name: Debug {{ var_name }}-{{ dev_environment }}-octopus-server-ums-2 result
      debug:
        var: os_second_var

    # Gather EC2 os_ums_second Instance Facts #
    - name: Gather EC2 Facts
      ec2_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          "tag:Name": "{{ var_name }}-{{ dev_environment }}-octopus-server-ums-2"
      register: ec2_os_second_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_os_second_facts

    - name: Wait for EC2 Instance to boot
      command: "sleep 80"

    # Assign EIP to EC2 {{ var_name }}-{{ dev_environment }}-octopus-server-ums-2 instance #
    - name: Assign EIP to {{ var_name }}-{{ dev_environment }}-octopus-server-ums-2 instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        device_id: "{{ ec2_os_second_facts.instances[0].instance_id }}"
        release_on_disassociation: yes
      tags:
        - elastic_ip_os_second

    # Gather EIP Facts to run octopus_setup_server_ums.yml #
    - name: Gather EIP Facts to run octopus_setup_server_ums.yml
      ec2_eip_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        filters:
          instance-id: "{{ ec2_os_second_facts.instances[0].instance_id }}"
      tags:
        - elastic_ip_os_second
      register: eip_facts_os_second

    - name: Debug EIP Facts
      debug:
        var: eip_facts_os_second

    - name: Set the ip_addr_os_second Fact
      set_fact:
        ip_addr_os_second: "{{ eip_facts_os_second.addresses[0].public_ip }}"

    - name: Debug ip address of the server
      debug:
        var: ip_addr_os_second

    # Install octopus-server and ums-server Services #
    - name: Install os_ums_second services on EC2 os_ums_second instance
      command: "ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -u ec2-user -i {{ ip_addr_os_second }}, --private-key ~/.ssh/devops.pem octopus_setup_server_ums.yml"
      register: os_second_setup

    - name: Debug {{ var_name }}-{{ dev_environment }}-octopus-server-ums-2 instance setup
      debug:
        var: os_second_setup

    ############################################
    # Define ELB Target Groups #
    ############################################

    - name: Create ELB Target Group 1
      elb_target_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-server-grpc-target"
        port: 8081
        protocol: "TCP"
        vpc_id: "{{ vpc_name.vpc.id }}"
        state: present
        health_check_interval: 10
        health_check_port: "8081"
        health_check_protocol: "TCP"
        healthy_threshold_count: 2
        unhealthy_threshold_count: 2
        stickiness_type: source_ip
        targets:
          - Id: "{{ ec2_os_first_facts.instances[0].instance_id }}"
            Port: 8081
          - Id: "{{ ec2_os_second_facts.instances[0].instance_id }}"
            Port: 8081
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-server-grpc-target"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    - name: Create ELB Target Group 2
      elb_target_group:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-ums-grpc-target"
        port: 8083
        protocol: "TCP"
        vpc_id: "{{ vpc_name.vpc.id }}"
        state: present
        health_check_interval: 10
        health_check_port: "8083"
        health_check_protocol: "TCP"
        healthy_threshold_count: 2
        unhealthy_threshold_count: 2
        stickiness_type: source_ip
        targets:
          - Id: "{{ ec2_os_first_facts.instances[0].instance_id }}"
            Port: 8083
          - Id: "{{ ec2_os_second_facts.instances[0].instance_id }}"
            Port: 8083
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-ums-grpc-target"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    # Define Network Load Balancer #
    - name: Create an ELB and attach a listener
      elb_network_lb:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ var_name }}-grpc-elb"
        subnets:
          - "{{ public_subnet_1.subnet.id }}"
          - "{{ public_subnet_2.subnet.id }}"
        cross_zone_load_balancing: yes
        scheme: internal
        state: present
        listeners:
          - Protocol: "TCP"
            Port: 8081
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ var_name }}-server-grpc-target"
          - Protocol: "TCP"
            Port: 8083
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ var_name }}-ums-grpc-target"
        tags:
          Name: "{{ var_name }}-{{ dev_environment }}-grpc-elb"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"

    # Create missing databases on RDS instances #
    - name: Create multiple databases on RDS octopus-server-comments-ums db instance
      postgresql_db:
        login_host: "{{ endpoint_server_db }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        port: 5432
        state: present
        encoding: UTF8
        lc_collate: "en_US.UTF-8"
        lc_ctype: "en_US.UTF-8"
        name: "{{ item }}"
      loop:
        - octopus_comments_db
        - ums_db

    # Gather RDS Facts #
    - name: Gather {{ var_name }}-{{ dev_environment }}-chat-analytics-ecommerce-db RDS instance Facts
      rds_instance_info:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        db_instance_identifier: "{{ var_name }}-{{ dev_environment }}-chat-analytics-ecommerce-db"
      register: rds_facts

    - name: set facts for chat-analytics-ecommerce-db RDS instance
      set_fact:
        endpoint_chat_db: "{{ rds_facts.instances[0].endpoint.address }}"

    # Create missing databases on RDS instances #
    - name: Create multiple databases on RDS chat-analytics-ecommerce-db db instance
      postgresql_db:
        login_host: "{{ endpoint_chat_db }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        port: 5432
        state: present
        encoding: UTF8
        lc_collate: "en_US.UTF-8"
        lc_ctype: "en_US.UTF-8"
        name: "{{ item }}"
      loop:
        - octopus_analytics_db
        - octopus_ecommerce_db

    # Create required S3 buckets #
    - name: Create S3 buckets
      s3_bucket:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ item }}"
        state: present
        versioning: no
        tags:
          Name: "{{ item }}"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        purge_tags: yes
      loop:
        - "{{ var_name }}-{{ dev_environment }}-octopus-server"
        - "{{ var_name }}-{{ dev_environment }}-private-octopus-server-s3"
        - "{{ var_name }}-{{ dev_environment }}-chat-server-user-attachments"
        - "{{ var_name }}-{{ dev_environment }}-ecommerce-s3"
        - "{{ var_name }}-{{ dev_environment }}-private-ecommerce-s3"
      register: s3_debug

    - name: debug S3 Bucket
      debug:
        var: s3_debug

    # Create required S3 chat-server-canned-attachments bucket #
    - name: Create S3 chat-server-canned-attachments bucket
      s3_bucket:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ item }}"
        state: present
        versioning: no
        policy: '{ "Version": "2012-10-17", "Statement": [ { "Sid": "PublicReadGetObject", "Effect": "Allow", "Principal": { "AWS": "*" }, "Action": "s3:GetObject", "Resource": "arn:aws:s3:::{{ var_name }}-{{ dev_environment }}-chat-server-canned-attachments/*" } ] }'
        tags:
          Name: "{{ item }}"
          user:client: "{{ var_name }}"
          user:Environment: "{{ dev_environment }}"
        purge_tags: yes
      loop:
        - "{{ var_name }}-{{ dev_environment }}-chat-server-canned-attachments"
      register: s3_chat

    - name: debug S3 Chat bucket
      debug:
        var: s3_chat

    # Create CORS rules for created S3 buckets #
    - name: Apply CORS rules to S3 buckets
      aws_s3_cors:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        region: "{{ AWS_REGION }}"
        name: "{{ item }}"
        state: present
        rules:
          - allowed_origins:
              - "*"
            allowed_methods:
              - GET
              - POST
              - PUT
              - DELETE
            allowed_headers:
              - "*"
            expose_headers:
              - ETag
            max_age_seconds: 3000
      loop:
        - "{{ var_name }}-{{ dev_environment }}-octopus-server"
        - "{{ var_name }}-{{ dev_environment }}-private-octopus-server-s3"
        - "{{ var_name }}-{{ dev_environment }}-chat-server-user-attachments"
        - "{{ var_name }}-{{ dev_environment }}-chat-server-canned-attachments"
        - "{{ var_name }}-{{ dev_environment }}-ecommerce-s3"
        - "{{ var_name }}-{{ dev_environment }}-private-ecommerce-s3"
      register: s3_cors

    - name: debug S3 CORS Rules
      debug:
        var: s3_cors
