- hosts: localhost
  gather_facts: yes
  vars_files:
    - keys.yml
  tasks:
    # Gather EC2 Instance Facts #
    - name: Gather EC2 Facts
      ec2_instance_info:
        filters:
          "tag:user:client": "{{ name }}"
      register: ec2_facts

    - name: Debug EC2 Facts
      debug:
        var: ec2_facts

    # Terminate EC2 Instances #
    - name: Terminate all {{ name }}-{{ dev_environment }} EC2 instances
      ec2:
        region: "{{ AWS_REGION }}"
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        state: absent
        wait: yes
        instance_ids: "{{ item.instance_id }}"
      with_items: "{{ ec2_facts.instances }}"

    # Terminate RDS Instances #
    - name: Terminate {{ name }}-{{ dev_environment }} RDS instance
      rds:
        region: "{{ AWS_REGION }}"
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        command: delete
        wait: yes
        wait_timeout: 420
        instance_name: "{{ name }}-{{ dev_environment }}-db"
        snapshot: "{{ name }}-{{ dev_environment }}-db"

    # Delete S3 Buckets #
    - name: Delete all {{ name }}-{{ dev_environment }} S3 buckets
      s3_bucket:
        state: absent
        name: "{{ item }}"
        force: yes
      loop:
        - "{{ name }}-{{ dev_environment }}-octopus-server"
        - "{{ name }}-{{ dev_environment }}-private-octopus-server-s3"
        - "{{ name }}-{{ dev_environment }}-chat-server-user-attachments"
        - "{{ name }}-{{ dev_environment }}-chat-server-canned-attachments"
        - "{{ name }}-{{ dev_environment }}-ecommerce-s3"
        - "{{ name }}-{{ dev_environment }}-private-ecommerce-s3"

    # Gather facts for SG #
    - name: Gather SG Facts
      ec2_group_info:
        filters:
          "tag:user:client": "{{ name }}"
      register: sg_facts

    - name: Debug SG Facts
      debug:
        var: sg_facts

    # Remove SG #
    - name: Remove {{ name }}-{{ dev_environment }} SG
      ec2_group:
        state: absent
        group_id: "{{ item.group_id }}"
      with_items: "{{ sg_facts.security_groups }}"

    # Gather VPC Facts #
    - name: Gather VPC Facts
      ec2_vpc_net_info:
        filters:
          "tag:user:client": "{{ name }}"
      register: vpc_facts

    - name: Debug VPC Facts
      debug:
        var: vpc_facts

    # Delete IG #
    - name: Remove {{ name }}-{{ dev_environment }} IG
      ec2_vpc_igw:
        state: absent
        vpc_id: "{{ vpc_facts.vpcs[0].id }}"

    # Gather Subnet Facts #
    - name: Gather Subnet Facts
      ec2_vpc_subnet_info:
        filters:
          "tag:user:client": "{{ name }}"
      register: subnet_facts

    - name: Debug Subnet Facts
      debug:
        var: subnet_facts

    # Delete Subnets #
    - name: Remove {{ name }}-{{ dev_environment }} Subnets
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ subnet_facts.subnets[0].vpc_id }}"
        cidr: "{{ item }}"
      with_items:
        - 200.1.1.0/24
        - 200.1.2.0/24

    # Gather RT Facts #
    - name: Gather RT Facts
      ec2_vpc_route_table_info:
        region: "{{ AWS_REGION }}"
        filters:
          "tag:user:client": "{{ name }}"
      register: rt_facts

    - name: Debug RT Facts
      debug:
        var: rt_facts

    # Delete RT #
    - name: Remove {{ name }}-{{ dev_environment }} RT
      ec2_vpc_route_table:
        state: absent
        region: "{{ AWS_REGION }}"
        vpc_id: "{{ rt_facts.route_tables[0].vpc_id }}"
        route_table_id: "{{ rt_facts.route_tables[0].id }}"
        lookup: id

    # Delete VPC #
    - name: Remove {{ name }}-{{ dev_environment }} VPC
      ec2_vpc_net:
        state: absent
        name: "{{ name }}-{{ dev_environment }}-vpc"
        cidr_block: "{{ vpc_facts.vpcs[0].cidr_block }}"
